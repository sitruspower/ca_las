% for unconstrained: comment fs=0.5 in func_initialise

close all;


clear all;
% change presicion:
presicion = 3;
digits(presicion);

precalc = 1; % slicing, initialisation

if precalc
    tic
    disp('extending the slice....')    
    run sliceExtension3D.m  % inputfile = 'MeltPool.csv'; --> MeltPoolExtended.csv
    toc
    tic
    disp('interpolating....')
    run slice2grid3D.m  % 'MeltPoolExtended.csv' -> 'InterpolatedTemperatureGrid.mat. Assigns "Filling temperature, which is 2200oC; Controls 'dx'
    toc
    tic
    disp('assigning orientation....')
    run assignRandomOrientation3D.m % InterpolatedTemperatureGrid.mat -> RandomOrientation.mat 
    toc
end


% then run:

%% initialisation
Tliq = 4000;
Tsol = 2900;
velocity = 2.5; % [mm/s], laser speed
%dx = 2.5e-3;     % [mm] mesh size
A=1.e-4;         % growth velocity coefficient
Tfilling = 2200; % oc. Change slice2grid3D.m when assigned different
inputs=open('InterpolatedTemperatureGrid.mat'); % opening just for the slice, to be removed...
%% opening grid values
xi = inputs.xi;
yi = inputs.yi;
zi = inputs.zi;
Initial_temperature = inputs.vq;
xslice = inputs.xslice;
yslice = inputs.yslice;
zslice = inputs.zslice;
xmin = inputs.xmin; 
ymin = inputs.ymin;
zmin = inputs.zmin;
n=length(xi(:,1,1));
m=length(yi(1,:,1));
l=length(zi(1,1,:));
dx = xi(1,2,1)-xi(1,1,1);  % mm
dy = dx;  % mm
dz = dx;  % mm

%% active grains decision
%%%%%%%%%%%
checker = 0; % fs = 0.5, active = some chosen grains, no "putMoltenPool"

%% computations
if 1
    tic
    disp('initialising_struct...')
    struct = func_initialise_struct_portions3D(Initial_temperature, Tliq, Tsol, checker);
    toc
end
if checker == 1  % with =0 all active grains!
    deltagrain = 3;
    active = [round(n/2),round(m/2),round(l/2);...
                round((n - deltagrain)/2),round((m)/2),round(l/2);...
                round((n + deltagrain)/2),round((m)/2),round(l/2)]; % chosen grains
    % middle grain        
    struct.alpha(active(1,1),active(1,2),active(1,3)) = pi/4;
    struct.beta(active(1,1),active(1,2),active(1,3)) = pi/4;
    struct.gamma(active(1,1),active(1,2),active(1,3)) = 0;
    
    % left (bottom) grain
    struct.alpha(active(2,1),active(2,2),active(2,3)) = 0;
    struct.beta(active(2,1),active(2,2),active(2,3)) = 0;
    struct.gamma(active(2,1),active(2,2),active(2,3)) = 0;
    
    %third (top) grain
    struct.alpha(active(3,1),active(3,2),active(3,3)) = 0;
    struct.beta(active(3,1),active(3,2),active(3,3)) = 0;
    struct.gamma(active(3,1),active(3,2),active(3,3)) = 0;
else
    %CORRECT MAIN FUNCTION
    active = func_active_cells3D(struct, dx); % xslice, yslice, zslice, xi, yi, zi, xmin, ymin, zmin);
end


% vmax = max(vertcat(struct.undercooling)).^2*A;
v_mushy = struct.temp(struct.temp<Tliq);
v_mushy = v_mushy(v_mushy>Tsol);
% vmax = single(max(Tliq-v_mushy, [], 'all')); 
vmax = 100.^2*A;

%timestepping
NUMBER_OF_TIMESTEPS = 100; % 80=17; 40=9, 60=13
timestep = dx/(2*sqrt(3)* vmax); % 10 timesteps per square % CHANGE COEFFICIENT TO >=2
timelimit = timestep*NUMBER_OF_TIMESTEPS; %0.04;
delta_pos = 2;
%Tliqhigh = Tliq + max_grad*delta_pos; % deg C, where it won't attach new point. second number
Tliqhigh = Tliq;  % overriding Tliqhigh, thus growth only in mushy zone

for pos=1:delta_pos :round(3*m/5) %10:10:600
    tic        
    presicion = 5;
    digits(presicion);
    fprintf('POS= %.f;', pos);
    time = (pos+5)/velocity*dx; % s


    
    7if 1
        temperature = func_move_molten_pool3D...
                      (Initial_temperature, xi, yi,zi, Tfilling, velocity, time, dx);  % no plotting 

        if checker == 1
            disp('checker=1. func restruct_fs_addT is suppressed')
            active=active(1,:);
        else
            %% checking. Moving active on pos instead of moving the pool:
            struct = func_restruct_fs_addT3D(struct, temperature, Tliq, Tsol,n,m,l, active);  % no plotting

            active = func_active_cells3D(struct, dx);
%                     active(:,:,:) = active(:,:,:)+[delta_pos,0,0];

        end
        pause(0.5)
    end


    tic
    struct = func_growth_in_sl_parallel3D(active, struct, timelimit, timestep, dx, xmin,ymin,zmin);
    disp('time per growth:')
    toc

    %% plotting 
    plotting = 1; 
    if plotting ==1     
        plot_struct(struct, n,m,l)

    end


    pause(1/100)

    toc
end


disp('saving struct..............')
%     savefig(strcat('Alpha. pos=', string(pos),'.fig'))

save('mystruct.mat', 'struct')
%save('mystruct.mat', 'struct', '-v7.3')

strcat('pos=', string(pos),'.fig');
%     savefig(strcat('Alpha. pos=', string(pos),'.fig'))
pause(1/1000)
